
from collections import defaultdict
from itertools import count
input = """\
#################################################################################
#...#.............#...#.W...............#.#...#.....#.........#.#.......#.......#
#.#.#.#.#########.#.#.#.###############.#.#.#.#.#.#.#.#.#####.#.#.#####.#.###.#.#
#.#...#.#.......#.#.#.#.#.......#.......#...#.#.#.#.#.#g#...#.#.....#.#..d..#.#.#
#.#####.#.#####.#.#D#.#.#.###.###.#######.###.#.#.#.#.#.#.#.#.#####.#.#######.#.#
#v..#.#.#.#.#...#.#.#...#.#...#...#.....#...#...#.#.#.#.#.#.#.....#...#...#...#.#
###.#.#.#.#.#.#####.#####.###.#.###.###.###.#####.#.#.#.#.#U#####.#####.#.#.###.#
#...#...#.#.#.#...#...#.....#.#.#.....#.#...#...#.#.#.#.#.#...#...#.....#...#.#.#
#.#######.#.#.#.#.###.#.###.#C#.#######.#.###.#.#.#.#.###.###.#.###.#########.#.#
#...#...#.#.#...#...#.#.#...#.#..t......#.#.#.#...#.#...#.#x..#.#...#.........#.#
#.#.#.#.#.#.#######.#.#.#.###.#########.#.#.#.#########.#.#.###.#.###.#######.#.#
#.#.#.#...#.......#.#.#.#...#.#.....#...#...#.........#...#.#..a..#...#..w....#.#
###.#.#####.###.###.#.#.###.###.###.#.#####.#########.#####.#.#########.###.###.#
#...#...#...#...#...#.#.#...#...#...#...#e#.....#...#...#...#.#..o#.....#.#.#...#
#.#.###.#.###.###.###.#.#.###.###.#####.#.#####.#.#.###.#.#####.#.#.#####.#.#.###
#.#.#.#...#...#.F.#...#.#.....#.#.......#.#.....#.#.#...#.....X.#.#...#.....#.#.#
#.#.#.#####.###.###.#######.###.#########.#.#####.###.###########.###.###.###.#.#
#.#.....#.....#.#...#.G...#...#...#.....#.#.......#...#.........#...#...#...#...#
#.#.#####.#####.#.###.###.###.#.#.#.###.#.#######.#.###.#####.#####.#.#.#######T#
#.#.#.....#.....#.#..u#...#.#.#.#.#.#.#.#.#.L.....#.....#.#...#.....#.#...#.....#
#.#.#.#####.###.#.#.###.###.#.#.###.#.#.#.#.#############.#.###.#########.#.#####
#.#.#.....#.#...#.#...#.#.#...#.#.....#.#...#.............#.#.#.....#j..#.......#
#.#######.#.#.###A#####.#.#.###.#.#####.#.###.###########.#.#Q#.###.#.#.#######.#
#.......#.#.#...#.......#.#.#.......#...#...#.....#.......#.#.#.O.#...#.....#...#
#.#.#.###.#.#############.#.#########.#.###.#.###.#########.#.#############J#.###
#.#.#z#...#...............#.#...#...#.#.#.#.#.#...#...#.....#.....#k..N...#.#...#
#.#.###.###############.###.#.#.#.#.#.#.#.#.###.###.#.#.#.#######.#.#####.#.###.#
#.#...#...#.....#.......#...#.#...#...#.#.#.#...#...#...#.#....q..#...#.#.#.#...#
#####.###.#.###.#.#######.###.###########.#.#.###.###.#####.#######.#.#.#.#.#.###
#.......#.#.#.#.#.........#.............#.#.#...#.#...#...#.#.......#.#n..#.#.#c#
#.#.#####.#.#.#.###############.#######.#.#.#.#.#.#.###.#.#.#########.#.###.#.#.#
#.#.#...#...#.#.....#.........#.#...#...#.#.#.#.#.#...#.#.#.......K...#.....#...#
#.###.#.#####.#####.#####.###.#.#.#.#.#.#.#.###.#.#.###.#.#####################.#
#.#...#...#.......#.......#...#...#.#.#.#.#.#...#.#.#...#.................#.....#
#.#.###.###Y#.#############.#######.#.#.#.#.#.###.###.#######.#########.###.#####
#.#.#.#.....#.#...........#.#.....#.#.#.#.#.#.#...#...#.....#.#...#...#.#...#...#
#.#.#.#######.#.###.#####.#.#.#.#.###.#.#.#.#.#.#.#.###.###.#.#.#.#.#.###.###.#.#
#...#.......#...#.#...#...#.#.#.#...#.#.#...#.#.#.#.#.....#.#.#.#...#...#.....#i#
#M###.#####.#####.###.#####.###.###.#.#.#.###.#.###.#######.#.#.#######.#######.#
#....b#.............#...........#.....#.......#.............#.........#.........#
#######################################.@.#######################################
#.#.......#...#.......#.......#.....#.....#...#...............#.....B.....#.....#
#.#.#.###.#.###.#.###.#.#####.#.###.#.#.#.#.#.#.#####.#####.###.#.#########.###.#
#...#.#.....#...#.#.#.#.#...#.#.#...#.#.#...#.#.#.#...#.....#...#.#.....#...#.#.#
#H###.#.#####.###.#.#.#.###.#.#.#.###.#.#.###.#.#.#.#.#######.###.#.###.#.###.#.#
#.#...#...#...#.#.#.#.#.#...#...#.....#.#...#...#.#.#.#...#...#...#.#.#.#.#...#.#
#.#.#####.#.###.#.#.#.#.#.#############.###.#####.#.#.#.#.#.###.###.#.#.#.#.#.#.#
#.#.....#.#...#.#.#...#.#.....#.....#...#...#.....#.#.#.#.#.#.#...#...#...#.#.#.#
#.#####.#.###.#.#.###.#.#.#.###.###.#.#.#.#######.#.###.#.#.#.###.###.#####.#.#.#
#.....#.#.#.#.#.#...#.#.#.#...#...#.#.#.#.........#.....#.#.....#.#...#.....#.#f#
#######.#.#.#.#.###.###.#####.#.###.#.###########.#######.#.#####.#.#####.#.#.#.#
#.......#...#.....#.....#...#...#...#..l#.......#.#.......#.#.....#.#...#.#.#.#.#
#.#######.###.#####.#####.#.#####.#.###.#.#.#####.#.#####.#.#.#####.#.#.###.###.#
#...#.I.#.#...#...#.......#.......#.#...#.#.......#...#..y#.#...Z.#.#.#...#.#...#
###.#.###.#.###.#.#############.#####.#.#.###########.#####.#####.#.#V###.#.#.#.#
#...#.....#.#...#...#...........#.....#.#...E.......#.....#...#.#...#.#.....#.#.#
#.#######.#.#.#####.#####.#######.#################.#####.###.#.#####.#.#####.###
#...P...#.#.#.#...#.....#.#.....#...#...#.........#...#.#.....#..m..#.#.#...#...#
#.#####.###.#.#.#.#####.###.###.#.#.#.#.#.#.#########.#.#######.###.#.#R#.#.###.#
#.#.....#...#...#.#.......#.#.#.#.#...#.#.#...#.....#.....#.....#...#.#.#.#...#.#
#.#.#####.#######.#######.#.#.#.#######.#.###.#.###.#####.#.#####.###.#.#.###.#.#
#.#.....#.....#.#...#.#.....#...#.......#...#.#.#.#.....#.#.#.#...#...#.#.#.#...#
#######.#####.#.###.#.#######.###.#########.#.#.#.#####.#.#.#.#.###.###.#.#.###.#
#.........#.#...#...#.....#.#...#.......#...#.#...#.....#...#.#.#...#...#.#.....#
#.#######.#.###.#.#.#####.#.###.#.#####.#.###.###.#.#####.###.#.###.#.###.###.###
#...#.........#.#.#...#...#.#...#...#.#.#.#.#...#.#.#.....#...#.#...#...#...#..p#
###.#.#########.#.#####.###.#.#####.#.#.#.#.###.#.#.#.#####.###.#.#####.###.###.#
#...#.#.........#.......#.#...#.......#.#.#...#.#.#.#.#.#...#.#.#.#...#.#.#...#.#
#.###.#.#################.#.#########.#.#.###.#.#.#.#.#.#.###.#.#.###.#.#.###.#.#
#...#.#.#.......#...#.....#.#.......#.#.#.#...#...#.#.#.#...#...#...#.....#.#.#.#
#.#.###.#.###.#.#.#.#####.#.###.###.#.#.#.#.#######.#.#.###.#.###.#.#####.#.#.###
#.#...#.#.#...#.#.#...#...#...#...#.#.#.#...#.....#.#...#...#.#...#...#.....#...#
#####.#.###.###.#.###.#.#.###.###.#.###.#.###.###.#.###.#.###.#######.#.#######.#
#..r#.#...#.#.....#...#s#...#.....#...#.#.#...#.#.#.#...#.#...#.......#.#...S...#
#.#.#.###.#.#######.###.#############.#.###.###.#.#.#.###.#.###.#######.#.#####.#
#.#.....#.#.#...#.#...#.........#...#.#.#...#.......#...#.#.....#.#.....#.#.#...#
#.#######.#.#.#.#.###.#.###.###.#.#.#.#.#.#############.#.#######.#.#####.#.#.###
#.#.....#.#...#.#.....#...#.#...#.#.#...#.....#...#...#.#.....#.....#..h..#.#.#.#
#.#.###.#.#####.#.#########.#.###.#.#####.###.#.#.#.#.#.#####.#######.#####.#.#.#
#.....#.........#...........#.....#.....#...#...#...#.......#.........#.........#
#################################################################################\
"""
# import numpy as np
# from copy import deepcopy
# _a = np.array([[m for m in x] for x in a.split("\n")])
# def findW(a, word, remove=False):
#     for i in range(a.shape[0]):
#         for j in range(a.shape[1]):
#             if a[i, j] == word:
#                 if remove:
#                     a[i, j] = " "
#                 return i, j

# def dddd(_a, start_key):
#     doors = {}
#     i, j = findW(_a, start_key, remove=True)
#     try:
#         findW(_a, start_key.upper(), remove=True)
#     except:
#         pass
#     a = deepcopy(_a)
#     w = np.zeros_like(a, dtype=int)
#     def dfs(x, y, key, length):
#         if a[x,y] != " ":
#             if a[x,y].islower() and a[x,y] != key:
#                 doors.setdefault(a[x,y], length)
#             return
#         if w[x,y] == 0 or w[x,y] > length:
#             w[x,y] = length
#             a[x,y] = key
#             if x < a.shape[0] - 1:
#                 dfs(x+1,y, key, length+1)
#             if x > 0:
#                 dfs(x-1,y, key, length+1)
#             if y < a.shape[1] - 1:
#                 dfs(x,y+1, key, length+1)
#             if y > 0:
#                 dfs(x,y-1, key, length+1)

#     dfs(i, j, start_key, 0)

#     # for i in range(a.shape[0]):
#     #     for j in range(a.shape[1]):
#     #         print(a[i,j], end="")
#     #     print()
#     min_total = 999999
#     for k, v in doors.items():
#         total = dddd(deepcopy(_a), k)
#         if total == 999999:
#             return v
#         if total + v < min_total:
#             min_total = total + v
#     # print(key, s, doors)
#     return min_total



# # for i in range(a.shape[0]):
# #     for j in range(a.shape[1]):
# #         print(a[i,j], end="")
# #     print()
# # print(doors)

# print(dddd(_a, "@"))
def parseInput(input):
    maze = {}
    goals = {}
    for y,row in enumerate(input.split('\n')):
        for x,cell in enumerate(row):
            p = complex(x,y)
            maze[p] = cell
            if cell in '#.': continue
            goals[cell] = p
    return maze, goals

def findLinks(maze, start):
    links = {}
    walk = defaultdict(lambda:[99999,{}])
    walk[start] = (0,set())
    next = [(start,set())]

    for step in count(1):
        if len(next)==0: break
        cur,next = next,[]
        for p,ds in cur:
            for d in [1,1j,-1,-1j]:
                c = maze[p+d]
                if c == '#' or walk[p+d][0]<=step: continue
                if c.islower():
                    links[c] = (step,ds)
                nds = ds
                if c.isupper():
                    nds = nds | {c.lower()}
                walk[p+d] = (step,nds)
                next.append((p+d,nds))
    return links # naturally sorted by distance
def findShortest1():
    maze, goals = parseInput(input)

    allKeys = {k for k in goals if k.islower()}
    links = {'@': findLinks(maze, goals['@'])}
    for k in allKeys:
        links[k] = findLinks(maze, goals[k])

    cache = {}
    def walk(name, needKeys):
        if len(needKeys)==0:
            return 0

        key = name + ''.join(needKeys)
        if key in cache:
            return cache[key]

        shortest = float('inf')
        for k in needKeys:
            l,doors = links[name][k]
            if l >= shortest: continue # too long to try
            if not doors.isdisjoint(needKeys): continue # can't open doors
            tail = walk(k, needKeys - {k})
            if shortest > l + tail: shortest = l + tail
        cache[key] = shortest
        return shortest
    
    res = walk('@', allKeys)
    # print('cached',len(cache))
    return res
print("day18-1:", findShortest1())
def findShortest4():
    maze, goals = parseInput(input)

    s = goals['@']
    maze[s]=maze[s+1]=maze[s-1]=maze[s+1j]=maze[s-1j]='#'
    maze[s+1+1j]='1'; goals['1'] = s+1+1j
    maze[s-1+1j]='2'; goals['2'] = s-1+1j
    maze[s+1-1j]='3'; goals['3'] = s+1-1j
    maze[s-1-1j]='4'; goals['4'] = s-1-1j

    allKeys = {k for k in goals if k.islower()}
    links = {}
    for k in '1234':
        links[k] = findLinks(maze, goals[k])
    for k in allKeys:
        links[k] = findLinks(maze, goals[k])

    cache = {}
    def walk(names, needKeys):
        if len(needKeys)==0:
            return 0

        key = ''.join(sorted(names)) + ''.join(sorted(needKeys))
        if key in cache:
            return cache[key]

        shortest = float('inf')
        for k in needKeys:
            for k2 in names:
                if k not in links[k2]: continue

                l,doors = links[k2][k]
                if l >= shortest: continue # too long to try
                if not doors.isdisjoint(needKeys): continue # can't open doors
                tail = walk((names - {k2}) | {k}, needKeys - {k})
                if shortest > l + tail: shortest = l + tail
        cache[key] = shortest
        return shortest
    
    res = walk({'1','2','3','4'}, allKeys)
    # print('cached',len(cache))
    return res
print("day18-2:", findShortest4())