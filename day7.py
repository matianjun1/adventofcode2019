import itertools


def main(n):
    a = [
        3,
        8,
        1001,
        8,
        10,
        8,
        105,
        1,
        0,
        0,
        21,
        38,
        55,
        64,
        81,
        106,
        187,
        268,
        349,
        430,
        99999,
        3,
        9,
        101,
        2,
        9,
        9,
        1002,
        9,
        2,
        9,
        101,
        5,
        9,
        9,
        4,
        9,
        99,
        3,
        9,
        102,
        2,
        9,
        9,
        101,
        3,
        9,
        9,
        1002,
        9,
        4,
        9,
        4,
        9,
        99,
        3,
        9,
        102,
        2,
        9,
        9,
        4,
        9,
        99,
        3,
        9,
        1002,
        9,
        5,
        9,
        1001,
        9,
        4,
        9,
        102,
        4,
        9,
        9,
        4,
        9,
        99,
        3,
        9,
        102,
        2,
        9,
        9,
        1001,
        9,
        5,
        9,
        102,
        3,
        9,
        9,
        1001,
        9,
        4,
        9,
        102,
        5,
        9,
        9,
        4,
        9,
        99,
        3,
        9,
        1002,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        101,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        1002,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        1001,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        1001,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        101,
        1,
        9,
        9,
        4,
        9,
        3,
        9,
        1001,
        9,
        1,
        9,
        4,
        9,
        3,
        9,
        1001,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        101,
        1,
        9,
        9,
        4,
        9,
        3,
        9,
        1001,
        9,
        1,
        9,
        4,
        9,
        99,
        3,
        9,
        1002,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        101,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        1001,
        9,
        1,
        9,
        4,
        9,
        3,
        9,
        101,
        1,
        9,
        9,
        4,
        9,
        3,
        9,
        101,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        101,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        1001,
        9,
        1,
        9,
        4,
        9,
        3,
        9,
        101,
        1,
        9,
        9,
        4,
        9,
        3,
        9,
        102,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        101,
        2,
        9,
        9,
        4,
        9,
        99,
        3,
        9,
        1002,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        101,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        102,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        101,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        1001,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        1002,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        1002,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        101,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        1001,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        101,
        1,
        9,
        9,
        4,
        9,
        99,
        3,
        9,
        102,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        1001,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        1002,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        102,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        102,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        101,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        101,
        1,
        9,
        9,
        4,
        9,
        3,
        9,
        101,
        1,
        9,
        9,
        4,
        9,
        3,
        9,
        1001,
        9,
        1,
        9,
        4,
        9,
        3,
        9,
        102,
        2,
        9,
        9,
        4,
        9,
        99,
        3,
        9,
        101,
        1,
        9,
        9,
        4,
        9,
        3,
        9,
        1002,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        102,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        1002,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        101,
        1,
        9,
        9,
        4,
        9,
        3,
        9,
        102,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        1002,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        1002,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        101,
        1,
        9,
        9,
        4,
        9,
        3,
        9,
        102,
        2,
        9,
        9,
        4,
        9,
        99,
    ]
    # a = [3,26,1001,26,-4,26,3,27,1002,27,2,27,1,27,26,27,4,27,1001,28,-1,28,1005,28,6,99,0,0,5]
    instruction_code = 0
    output = 0
    while a[instruction_code] != 99:
        # print(instruction_code, a[instruction_code : instruction_code + 5])
        instruction = str(a[instruction_code])
        opcode = instruction[-1]
        C = instruction[-3] if len(instruction) >= 3 else "0"
        B = instruction[-4] if len(instruction) >= 4 else "0"
        # A = instruction[-5] if len(instruction) >= 5 else "0"
        if opcode == "4":
            output = a[a[instruction_code + 1]]
            instruction_code += 2
        elif opcode == "3":
            a[a[instruction_code + 1]] = n.pop()
            instruction_code += 2
        elif opcode == "1":
            c_num = a[instruction_code + 1] if C == "1" else a[a[instruction_code + 1]]
            b_num = a[instruction_code + 2] if B == "1" else a[a[instruction_code + 2]]
            a[a[instruction_code + 3]] = c_num + b_num
            instruction_code += 4
        elif opcode == "2":
            c_num = a[instruction_code + 1] if C == "1" else a[a[instruction_code + 1]]
            b_num = a[instruction_code + 2] if B == "1" else a[a[instruction_code + 2]]
            a[a[instruction_code + 3]] = c_num * b_num
            instruction_code += 4
        if opcode == "5":
            c_num = a[instruction_code + 1] if C == "1" else a[a[instruction_code + 1]]
            b_num = a[instruction_code + 2] if B == "1" else a[a[instruction_code + 2]]
            if c_num == 0:
                instruction_code += 3
            else:
                instruction_code = b_num
        if opcode == "6":
            c_num = a[instruction_code + 1] if C == "1" else a[a[instruction_code + 1]]
            b_num = a[instruction_code + 2] if B == "1" else a[a[instruction_code + 2]]
            if c_num != 0:
                instruction_code += 3
            else:
                instruction_code = b_num
        if opcode == "7":
            c_num = a[instruction_code + 1] if C == "1" else a[a[instruction_code + 1]]
            b_num = a[instruction_code + 2] if B == "1" else a[a[instruction_code + 2]]
            a[a[instruction_code + 3]] = 1 if c_num < b_num else 0
            instruction_code += 4
        if opcode == "8":
            c_num = a[instruction_code + 1] if C == "1" else a[a[instruction_code + 1]]
            b_num = a[instruction_code + 2] if B == "1" else a[a[instruction_code + 2]]
            a[a[instruction_code + 3]] = 1 if c_num == b_num else 0
            instruction_code += 4
    return output

max_signal = 0
for n in itertools.permutations(range(5)):
    v = main([main([main([main([main([0, n[0]]), n[1]]), n[2]]), n[3]]), n[4]])
    if v > max_signal:
        max_signal = v
print("day7-1:", max_signal)

def main():
    a = [
        3,
        8,
        1001,
        8,
        10,
        8,
        105,
        1,
        0,
        0,
        21,
        38,
        55,
        64,
        81,
        106,
        187,
        268,
        349,
        430,
        99999,
        3,
        9,
        101,
        2,
        9,
        9,
        1002,
        9,
        2,
        9,
        101,
        5,
        9,
        9,
        4,
        9,
        99,
        3,
        9,
        102,
        2,
        9,
        9,
        101,
        3,
        9,
        9,
        1002,
        9,
        4,
        9,
        4,
        9,
        99,
        3,
        9,
        102,
        2,
        9,
        9,
        4,
        9,
        99,
        3,
        9,
        1002,
        9,
        5,
        9,
        1001,
        9,
        4,
        9,
        102,
        4,
        9,
        9,
        4,
        9,
        99,
        3,
        9,
        102,
        2,
        9,
        9,
        1001,
        9,
        5,
        9,
        102,
        3,
        9,
        9,
        1001,
        9,
        4,
        9,
        102,
        5,
        9,
        9,
        4,
        9,
        99,
        3,
        9,
        1002,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        101,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        1002,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        1001,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        1001,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        101,
        1,
        9,
        9,
        4,
        9,
        3,
        9,
        1001,
        9,
        1,
        9,
        4,
        9,
        3,
        9,
        1001,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        101,
        1,
        9,
        9,
        4,
        9,
        3,
        9,
        1001,
        9,
        1,
        9,
        4,
        9,
        99,
        3,
        9,
        1002,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        101,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        1001,
        9,
        1,
        9,
        4,
        9,
        3,
        9,
        101,
        1,
        9,
        9,
        4,
        9,
        3,
        9,
        101,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        101,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        1001,
        9,
        1,
        9,
        4,
        9,
        3,
        9,
        101,
        1,
        9,
        9,
        4,
        9,
        3,
        9,
        102,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        101,
        2,
        9,
        9,
        4,
        9,
        99,
        3,
        9,
        1002,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        101,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        102,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        101,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        1001,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        1002,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        1002,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        101,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        1001,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        101,
        1,
        9,
        9,
        4,
        9,
        99,
        3,
        9,
        102,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        1001,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        1002,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        102,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        102,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        101,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        101,
        1,
        9,
        9,
        4,
        9,
        3,
        9,
        101,
        1,
        9,
        9,
        4,
        9,
        3,
        9,
        1001,
        9,
        1,
        9,
        4,
        9,
        3,
        9,
        102,
        2,
        9,
        9,
        4,
        9,
        99,
        3,
        9,
        101,
        1,
        9,
        9,
        4,
        9,
        3,
        9,
        1002,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        102,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        1002,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        101,
        1,
        9,
        9,
        4,
        9,
        3,
        9,
        102,
        2,
        9,
        9,
        4,
        9,
        3,
        9,
        1002,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        1002,
        9,
        2,
        9,
        4,
        9,
        3,
        9,
        101,
        1,
        9,
        9,
        4,
        9,
        3,
        9,
        102,
        2,
        9,
        9,
        4,
        9,
        99,
    ]
    output = 0
    instruction_code = 0
    while a[instruction_code] != 99:
        # print(instruction_code, a[instruction_code : instruction_code + 5])
        instruction = str(a[instruction_code])
        opcode = instruction[-1]
        C = instruction[-3] if len(instruction) >= 3 else "0"
        B = instruction[-4] if len(instruction) >= 4 else "0"
        # A = instruction[-5] if len(instruction) >= 5 else "0"
        if opcode == "4":
            output = a[a[instruction_code + 1]]
            yield output
            instruction_code += 2
        elif opcode == "3":
            a[a[instruction_code + 1]] = yield
            instruction_code += 2
        elif opcode == "1":
            c_num = a[instruction_code + 1] if C == "1" else a[a[instruction_code + 1]]
            b_num = a[instruction_code + 2] if B == "1" else a[a[instruction_code + 2]]
            a[a[instruction_code + 3]] = c_num + b_num
            instruction_code += 4
        elif opcode == "2":
            c_num = a[instruction_code + 1] if C == "1" else a[a[instruction_code + 1]]
            b_num = a[instruction_code + 2] if B == "1" else a[a[instruction_code + 2]]
            a[a[instruction_code + 3]] = c_num * b_num
            instruction_code += 4
        if opcode == "5":
            c_num = a[instruction_code + 1] if C == "1" else a[a[instruction_code + 1]]
            b_num = a[instruction_code + 2] if B == "1" else a[a[instruction_code + 2]]
            if c_num == 0:
                instruction_code += 3
            else:
                instruction_code = b_num
        if opcode == "6":
            c_num = a[instruction_code + 1] if C == "1" else a[a[instruction_code + 1]]
            b_num = a[instruction_code + 2] if B == "1" else a[a[instruction_code + 2]]
            if c_num != 0:
                instruction_code += 3
            else:
                instruction_code = b_num
        if opcode == "7":
            c_num = a[instruction_code + 1] if C == "1" else a[a[instruction_code + 1]]
            b_num = a[instruction_code + 2] if B == "1" else a[a[instruction_code + 2]]
            a[a[instruction_code + 3]] = 1 if c_num < b_num else 0
            instruction_code += 4
        if opcode == "8":
            c_num = a[instruction_code + 1] if C == "1" else a[a[instruction_code + 1]]
            b_num = a[instruction_code + 2] if B == "1" else a[a[instruction_code + 2]]
            a[a[instruction_code + 3]] = 1 if c_num == b_num else 0
            instruction_code += 4
    return output


max_signal = 0
for n in itertools.permutations(range(5, 10)):
    x = main()
    x.send(None)
    x.send(n[0])
    v = x.send(0)
    x.send(None)
    y = main()
    y.send(None)
    y.send(n[1])
    v = y.send(v)
    y.send(None)
    z = main()
    z.send(None)
    z.send(n[2])
    v = z.send(v)
    z.send(None)
    e = main()
    e.send(None)
    e.send(n[3])
    v = e.send(v)
    e.send(None)
    d = main()
    d.send(None)
    d.send(n[4])
    v = d.send(v)
    d.send(None)
    while 1:
        v = x.send(v)
        try:
            x.send(None)
        except Exception:
            pass
        v = y.send(v)
        try:
            y.send(None)
        except Exception:
            pass
        v = z.send(v)
        try:
            z.send(None)
        except Exception:
            pass
        v = e.send(v)
        try:
            e.send(None)
        except Exception:
            pass
        v = d.send(v)
        try:
            d.send(None)
        except Exception:
            break

    if v > max_signal:
        max_signal = v

print("day7-2:", max_signal)
